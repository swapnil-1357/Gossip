<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Gossip/Chat</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link rel="icon" type="image/x-icon" href="./public/chat (1).png" />
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500;700;800&display=swap"
        rel="stylesheet" />
    <link href="https://cdn.jsdelivr.net/npm/remixicon@4.1.0/fonts/remixicon.css" rel="stylesheet" />
    <style>
        body {
            font-family: 'Montserrat', sans-serif;
        }

        #msg-container>div {
            margin-bottom: 2px;
        }

        .left {
            align-self: flex-start;
            background-color: white;
            border-radius: 1rem 1rem 1rem 0;
            padding: 0.4rem 0.6rem;
            max-width: 75%;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .right {
            align-self: flex-end;
            background-color: #dcfce7;
            border-radius: 1rem 1rem 0 1rem;
            padding: 0.4rem 0.6rem;
            max-width: 75%;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .middle {
            align-self: center;
            background-color: #e5e7eb;
            font-size: 0.75rem;
            color: #4b5563;
            padding: 0.3rem 0.7rem;
            border-radius: 9999px;
            max-width: 90%;
        }
    </style>
</head>

<body>
    <div id="main"
        class="bg-gradient-to-r from-cyan-500 to-blue-500 px-[5rem] py-[5rem] h-screen flex flex-col justify-center items-center gap-[3rem]">
        <div class="text-[3rem] leading-none font-bold text-white text-center">
            <i class="ri-chat-3-line"></i> GOSSIP
            <p class="text-[30px] mt-4">Welcome, <%= username %>
            </p>
        </div>
        <div id="chat" class="rounded-lg bg-black border-2 border-white h-[50vh] w-[60vw] flex flex-col">
            <div id="roomNameDisplay" class="bg-slate-200 py-4 px-6 rounded-md font-bold text-2xl text-blue-500">
                <%= roomname %>
            </div>
            <div id="msg-container" class="flex flex-col overflow-y-auto h-[80%] px-3 py-2">
            </div>
            <!-- Input section -->
            <div class="bg-slate-200 p-4 rounded-3xl flex items-center gap-4 mt-auto">
                <label for="fileInput" class="cursor-pointer">
                    <i class="ri-attachment-2 text-3xl font-bold text-blue-500"></i>
                </label>
                <input type="file" id="fileInput" class="hidden" />
                <i class="ri-chat-3-line text-3xl font-bold text-blue-500"></i>
                <input id="msg" autocomplete="off" type="text" placeholder="Enter your message..."
                    class="w-full bg-slate-200 border-2 border-slate-300 rounded-3xl px-4 py-2 outline-none" />
                <button id="btn" type="submit" class="text-3xl">
                    <i class="ri-send-plane-line font-bold text-blue-500"></i>
                </button>
            </div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/qs/6.10.5/qs.min.js" crossorigin="anonymous"
        referrerpolicy="no-referrer"></script>
    <script src="/socket.io/socket.io.js"></script>
    <script>
        const input = document.getElementById('msg');
        const button = document.getElementById('btn');
        const fileInput = document.getElementById('fileInput');
        const msgContainer = document.getElementById('msg-container');

        const username = '<%= username %>';
        const roomname = '<%= roomname %>';

        // Inject Cloudinary config from env via server render
        const cloudName = '<%= cloudName %>';
        const unsignedPreset = '<%= unsignedPreset %>';

        const socket = io();
        const shownSystemMessages = new Set();

        socket.emit('user-joined', { username, roomname });

        socket.on('message', (data) => {
            if (data.id === '1357' && shownSystemMessages.has(data.text)) return;
            if (data.id === '1357') shownSystemMessages.add(data.text);

            addMessage(data);
            msgContainer.scrollTop = msgContainer.scrollHeight;
        });

        button.addEventListener('click', (e) => {
            e.preventDefault();
            sendMessage();
        });

        input.addEventListener('keyup', (e) => {
            if (e.key === 'Enter') {
                e.preventDefault();
                sendMessage();
            }
        });

        fileInput.addEventListener('change', async () => {
            const file = fileInput.files[0];
            if (!file) return;

            const url = `https://api.cloudinary.com/v1_1/${cloudName}/auto/upload`;

            const formData = new FormData();
            formData.append('file', file);
            formData.append('upload_preset', unsignedPreset);

            try {
                const res = await fetch(url, {
                    method: 'POST',
                    body: formData,
                });
                const data = await res.json();

                if (!res.ok) throw new Error(data.error?.message || 'Upload failed');

                // Determine type: image or file
                const type = file.type.startsWith('image/') ? 'image' : 'file';

                socket.emit('chatMessage', {
                    type,
                    url: data.secure_url,
                    filename: file.name,
                    username,
                });
            } catch (err) {
                console.error(err);
                alert('Upload failed');
            }

            fileInput.value = ''; // reset input
        });

        function sendMessage() {
            const msg = input.value.trim();
            if (msg !== '') {
                socket.emit('chatMessage', msg);
                input.value = '';
                input.focus();
            }
        }

        function formatTime() {
            const now = new Date();
            return now.toLocaleTimeString([], {
                hour: '2-digit',
                minute: '2-digit',
                hour12: true,
            });
        }

        function addMessage(data) {
            const newChild = document.createElement('div');

            // Sender label (skip for system messages)
            if (data.id && data.id !== '1357') {
                const sender = document.createElement('p');
                sender.classList.add('font-bold', 'text-sm', 'text-black', 'mb-1');
                sender.textContent = data.username || 'Unknown';
                newChild.appendChild(sender);
            }

            // Message content
            if (data.type === 'image' && data.url) {
                const img = document.createElement('img');
                img.src = data.url;
                img.alt = 'Image';
                img.classList.add('max-w-xs', 'rounded-lg');
                newChild.appendChild(img);
            } else if (data.type === 'file' && data.url && data.filename) {
                const link = document.createElement('a');
                link.href = data.url;
                link.target = '_blank';
                link.classList.add('text-blue-600', 'underline');
                link.textContent = data.filename;
                newChild.appendChild(link);
            } else if (typeof data.text === 'string') {
                const text = document.createElement('p');
                text.textContent = data.text;
                newChild.appendChild(text);
            } else {
                // fallback stringify
                const text = document.createElement('p');
                text.textContent = JSON.stringify(data.text);
                newChild.appendChild(text);
            }

            // Timestamp
            const timeElem = document.createElement('span');
            timeElem.classList.add('text-xs', 'text-gray-500', 'mt-1', 'block');
            timeElem.textContent = data.time || formatTime();
            newChild.appendChild(timeElem);

            // Style based on sender
            if (data.id === socket.id) {
                newChild.classList.add('right');
            } else if (data.id === '1357') {
                newChild.classList.add('middle');
            } else {
                newChild.classList.add('left');
            }

            msgContainer.appendChild(newChild);
        }
    </script>
</body>

</html>